<!-- Draw player's grid -->
<table id="myGrid" class="table table-bordered battlefield">
  <tr>
    <th>&nbsp;</th>
    <% 10.times do |col_head| %>
        <th><%= col_head+1 %></th>
    <% end %>
  </tr>
  <% 10.times do |row| %>
      <tr>
        <th><%= (row+65).chr %></th>
        <% 10.times do |column| %>
            <!-- Refer to each cell by using ID: battlefield-[player_number]-[row]-[column]
              player_number: 0..n-1    ; n = number of players
              row:    0..9
              column: 0..9
            -->
            <td id="<%="battlefield-0-"+(row.to_s+"-"+column.to_s)%>">
              &nbsp;&nbsp;&nbsp;
            </td>
        <%end%>
      </tr>
  <%end%>
</table>

<!-- Place ships form: Draw only if the player is "Waiting" -->
<% if @current_game_player_status == $GAME_PLAYER_STATUS_WAITING %>
    <div id="placeShipForm">
      <%= form_tag("#", :class=>"form-inline") do %>

          <%= select_tag(:ship_alignment,options_for_select([['Hor',0],['Ver',1]]), :class=>"input-mini") %>

          <%= select_tag(:type_of_move,options_for_select([
                                                                  ['Carrier', 5],
                                                                  ['Battleship', 4],
                                                                  ['Destroyer', 3],
                                                                  ['Submarine', 2],
                                                                  ['Patrol Boat', 1]
                                                          ]), :class=>"input-small") %>

          <%= select_tag(:ship_row,options_for_select([
                                                              ['A',0],
                                                              ['B',1],
                                                              ['C',2],
                                                              ['D',3],
                                                              ['E',4],
                                                              ['F',5],
                                                              ['G',6],
                                                              ['H',7],
                                                              ['I',8],
                                                              ['J',9]
                                                      ]), :class=>"input-mini") %>

          <%= select_tag(:ship_column,options_for_select([
                                                                 ['1',0],
                                                                 ['2',1],
                                                                 ['3',2],
                                                                 ['4',3],
                                                                 ['5',4],
                                                                 ['6',5],
                                                                 ['7',6],
                                                                 ['8',7],
                                                                 ['9',8],
                                                                 ['10',9],
                                                         ]), :class=>"input-mini") %>
          <%= button_tag('Place', :id => 'placeButton', :type => 'button') %>
          <%= button_tag(:id => 'readyButton', :type => 'button') { content_tag :strong, 'Ready to play' } %>
          <%= button_tag(:id => 'randomButton', :type => 'button') { content_tag :strong, 'Random Placement of ships' } %>
      <% end %>

    </div>
<% end %>


<script>
    // *** Important variables to be used in client will be initialized here ***

    // Variable to store initial ship placements (length = 1 so that it compatibles to game_war)
    var player_battlefield = new Array(1); // Initialize a 3D array [number of players] = 0..n-1

    // Initialize battlefield 2d-array for each player
    for (var i=0; i<player_battlefield.length; i++) {
        player_battlefield[i] = new Array(10); // array: [number of rows] = 0..9
        for (var row=0; row<10; row++) {
            player_battlefield[i][row] = new Array(10);    // array: [number of columns in a row] = 0..9
            for (var col=0; col<10; col++) {
                player_battlefield[i][row][col] = 0;
            }
        }
    }

    /* Prepare an object to be sent via AJAX request to update game_moves */
    var allShips = {data:[
        {game_id:<%=@game.id%>,from_user_id:<%= current_user.id %>,to_user_id:<%= current_user.id %>,row:-1,column:0,ship_alignment:0, type_of_move:1},
        {game_id:<%=@game.id%>,from_user_id:<%= current_user.id %>,to_user_id:<%= current_user.id %>,row:-1,column:1,ship_alignment:0, type_of_move:2},
        {game_id:<%=@game.id%>,from_user_id:<%= current_user.id %>,to_user_id:<%= current_user.id %>,row:-1,column:2,ship_alignment:0, type_of_move:3},
        {game_id:<%=@game.id%>,from_user_id:<%= current_user.id %>,to_user_id:<%= current_user.id %>,row:-1,column:3,ship_alignment:0, type_of_move:4},
        {game_id:<%=@game.id%>,from_user_id:<%= current_user.id %>,to_user_id:<%= current_user.id %>,row:-1,column:4,ship_alignment:0, type_of_move:5}]
    };

    /* When the user opens the game for the first time, ships are randomly placed */
    randomPlacementOfShips();

    /* Event for "Place" button */
    $("#placeButton").click(function() {
        placeShip(this.form);
    })

    /*Button for the user to place ships randomly    */
    $("#randomButton").click(function() {
        randomPlacementOfShips();
    })


    /* When the player click on "Ready to play" button, it first checks that all 5 ships are placed.
     Then it sends AJAX requests of
     - ship positions (game_moves)
     - new player status (user_in_games)
     */
    $("#readyButton").click(function () {

        for (i=0; i<5; i++) {
            if (allShips.data[i].row == -1) {
                alert("Please place all ships first!!!");
                return;
            }
        }
        // Send ship positions AJAX call
        $.ajax({
            url:"/game_moves", // call "game_moves" controller
            type:"POST", // method "create"
            data: allShips
        });
        // Send ready notification AJAX call
        $.ajax({
            url:"/game_players/<%= @current_game_player.id %>",
            type:"PUT", // method "update"
            data: {status: <%=$GAME_PLAYER_STATUS_READY%>}
        });
        current_game_player_status = <%=$GAME_PLAYER_STATUS_READY%>;

        $("#placeShipForm").hide("slow");
        //$("#instruction").html("<h2>Now wait for the game to start</h2>");
    });

    /* TODO: click to place ship */
    $('#myGrid td').click(function (e) {
        //$(this).toggleClass("missed");
    });

    /* After the player selected ship alignment, type, row, col and click on "Place".
     It check whether the ship is not off screen and collide with other ships.
     Then it paints the grid with a new ship position.
     */
    function placeShip(form) {
        var alignment = parseInt(form.ship_alignment.value);
        var type = parseInt(form.type_of_move.value);
        var ship_row = form.ship_row.value;
        var ship_column = form.ship_column.value;

        var sizeOfShip = 0;

        if (type == 5) {
            sizeOfShip = 5;
        } else if (type == 4) {
            sizeOfShip = 4;
        } else if (type == 3 || type == 2) {
            sizeOfShip = 3;
        } else if (type == 1) {
            sizeOfShip = 2;
        }

        var start_row = parseInt(ship_row);
        var start_column = parseInt(ship_column);
        var is_increase_row = (alignment == 1)?1:0;
        var is_increase_column = (alignment == 0)?1:0;

        if (isValidNewShipPosition(alignment, start_row,start_column,sizeOfShip,type))  {

            // Delete ship from old position (if exists)
            if (allShips.data[type-1].row > -1) {
                var old_start_row = allShips.data[type-1].row;
                var old_start_column = allShips.data[type-1].column;
                var old_alignment = allShips.data[type-1].ship_alignment;
                var old_increase_row = (old_alignment == 1)?1:0;
                var old_increase_column = (old_alignment == 0)?1:0;

                for (var i=0; i<sizeOfShip; i++) {
                    var final_row = old_start_row+(i*old_increase_row);
                    var final_column = old_start_column+(i*old_increase_column);
                    // Clear from player_battlefield[0] variable
                    player_battlefield[0][final_row][final_column] = 0;
                    // Clear from displaying grid
                    $("#battlefield-0-"+final_row+"-"+final_column).removeClass("ship"+type+"Placed");
                }
            }

            // Replace data of ship in "allShips" object, which will be sent to server
            allShips.data[type-1].row = start_row;
            allShips.data[type-1].column = start_column;
            allShips.data[type-1].ship_alignment = alignment;
            allShips.data[type-1].type_of_move = type;

            for (var i=0; i<sizeOfShip; i++) {
                var final_row = start_row+(i*is_increase_row);
                var final_column = start_column+(i*is_increase_column);
                // Update player_battlefield variable
                player_battlefield[0][final_row][final_column] = type;
                // Draw ship on battlefield
                $("#battlefield-0-"+final_row+"-"+final_column).addClass("ship"+type+"Placed");
            }
        } // end if isValidNewShipPosition()
    }

    /* Helper function for placeShip(), to check validity of ship position */
    function isValidNewShipPosition(alignment, start_row,start_column,sizeOfShip,type, showAlert ) {
        if(typeof(showAlert)==='undefined') showAlert = true;
        var is_increase_row = (alignment == 1)?1:0;
        var is_increase_column = (alignment == 0)?1:0;

        for (var i=0; i<sizeOfShip; i++) {

            var row_to_check = start_row+i*is_increase_row;
            var column_to_check = start_column+i*is_increase_column;

            if ((row_to_check >= 0 && row_to_check < 10) && (column_to_check >= 0 && column_to_check < 10)) {
                var value_on_battlefield = player_battlefield[0][row_to_check][column_to_check];
                if (value_on_battlefield == 0 || value_on_battlefield == type) {
                    // current position is itself or no collision to other ships
                    // continue to next position, do nothing
                    continue;
                } else {
                    // there's something, alert and return false
                    if (showAlert) {
                        alert("Collide with another ship");
                    }
                    return false;
                }
            } else {
                if(showAlert) {
                    alert("Position out of screen");
                }
                return false;
            }
        }

        return true;
    }

    // Update game notification status (game_prep)
    function updateGameNotification(json_response) {
        for (var i=0; i<json_response.length; i++) {
            // Look for data of current player only
            var game_player = json_response[i];
            if (game_player.player_number != <%=@current_game_player_number%>) {
                continue;
            } else {
                // For blink effect
                var oldNotification = $("#notification").html();
                switch (game_player.status) {
                    case (<%=$GAME_PLAYER_STATUS_WAITING%>): $("#notification").html("<h2>Place your ships!</h2>"); break;
                    case (<%=$GAME_PLAYER_STATUS_READY%>): $("#notification").html("<h2>Waiting for other player to be ready.</h2>"); break;
                }
                if (oldNotification != $("#notification").html) {
                    //$("#notification").backgroundColor("red");// effect("highlight", {}, 2000);
                }
            }
        }
    }

    //When the user opens the game for the first time, or refreshes the game page without having placed the ships, this
    //gives the user a random placement of ships which the user can then change
    function randomPlacementOfShips()   {

        var sizeOfShip = 0;

        for( var type = 1; type <=5; type++)  {
            if (type == 5) {
                sizeOfShip = 5;
            } else if (type == 4) {
                sizeOfShip = 4;
            } else if (type == 3 || type == 2) {
                sizeOfShip = 3;
            } else if (type == 1) {
                sizeOfShip = 2;
            }

            var alignment = (Math.random() > 0.5)?1:0;
            var is_increase_row = (alignment == 1)?1:0;
            var is_increase_column = (alignment == 0)?1:0;
            var start_row = Math.floor((Math.random()*10)+1);
            var start_column = Math.floor((Math.random()*10)+ 1);

            while(isValidNewShipPosition(alignment, start_row,start_column,sizeOfShip,type, false) == false ) {
                start_row = Math.floor((Math.random()*10));
                start_column = Math.floor((Math.random()*10));
                alignment = (Math.random() > 0.5)?1:0;
                is_increase_row = (alignment == 1)?1:0;
                is_increase_column = (alignment == 0)?1:0;
            }

            if (isValidNewShipPosition(alignment, start_row,start_column,sizeOfShip,type) ) {
                // Delete ship from old position (if exists)
                if (allShips.data[type-1].row > -1) {
                    var old_start_row = allShips.data[type-1].row;
                    var old_start_column = allShips.data[type-1].column;
                    var old_alignment = allShips.data[type-1].ship_alignment;
                    var old_increase_row = (old_alignment == 1)?1:0;
                    var old_increase_column = (old_alignment == 0)?1:0;

                    for (var i=0; i<sizeOfShip; i++) {
                        var final_row = old_start_row+(i*old_increase_row);
                        var final_column = old_start_column+(i*old_increase_column);
                        // Clear from player_battlefield[0] variable
                        player_battlefield[0][final_row][final_column] = 0;
                        // Clear from displaying grid
                        $("#battlefield-0-"+final_row+"-"+final_column).removeClass("ship"+type+"Placed");
                    }
                }
                allShips.data[type-1].row = start_row;
                allShips.data[type-1].column = start_column;
                allShips.data[type-1].ship_alignment = alignment;
                allShips.data[type-1].type_of_move = type;

                for (var i=0; i<sizeOfShip; i++) {
                    var final_row = start_row+(i*is_increase_row);
                    var final_column = start_column+(i*is_increase_column);
                    // Update player_battlefield variable
                    player_battlefield[0][final_row][final_column] = type;
                    // Draw ship on battlefield
                    $("#battlefield-0-"+final_row+"-"+final_column).addClass("ship"+type+"Placed");
                }
            }
                // Replace data of ship in "allShips" object, which will be sent to server

        }

    }




</script>
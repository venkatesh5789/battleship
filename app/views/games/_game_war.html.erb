<div class="span6">

  <!-- This code creates "player tabs" -->
  <ul class="nav nav-tabs" id="playerTab">
    <% @game_players.each do |each_game_player| %>
        <li class="<%= "active" if each_game_player.user.username.eql?(current_user.username)%>">
          <a href="#player-<%= each_game_player.player_number %>" data-toggle="tab">
            <%= each_game_player.user.username %><%= " (me)" if each_game_player.user.username.eql?(current_user.username) %>
          </a>
        </li>
    <% end %>
  </ul>

  <!-- Draw all tabs -->
  <div class="tab-content">

    <!-- Div for each tab content -->
    <% @game_players.each do |each_game_player| %>

        <div class="tab-pane<%= " active" if each_game_player.user.username.eql?(current_user.username) %>"
             id="player-<%= each_game_player.player_number %>">

          <!-- Draw player's grid -->
          <table id="myGrid" class="table table-bordered battlefield">
            <tr>
              <th>&nbsp;</th>
              <% 10.times do |col_head| %>
                  <th><%= col_head+1 %></th>
              <% end %>
            </tr>
            <% 10.times do |row| %>
                <tr>
                  <th><%= (row+65).chr %></th>
                  <% 10.times do |column| %>
                      <!-- Refer to each cell by using ID: battlefield-[player_number]-[row]-[column]
                        player_number: 0..n-1    ; n = number of players
                        row:    0..9
                        column: 0..9
                      -->
                      <td id="<%="battlefield-"+each_game_player.player_number+"-"+(row.to_s+"-"+column.to_s)%>">
                        &nbsp;&nbsp;&nbsp;
                      </td>
                  <%end%>
                </tr>
            <%end%>
          </table>
        </div>
    <% end %>
  </div>

</div>

<script>

    /* TODO: Have to deal with other players that may join the game on-the-fly!
     *        The player_battlefield must be extended then.
     * */
    var player_battlefield = new Array(<%=@game_players.count%>); // Initialize a 3D array [number of players] = 0..n-1

    // Initialize battlefield 2d-array for each player
    for (var i=0; i<player_battlefield.length; i++) {
        player_battlefield[i] = new Array(10); // array: [number of rows] = 0..9
        for (var row=0; row<10; row++) {
            player_battlefield[i][row] = new Array(10);    // array: [number of columns in a row] = 0..9
            for (var col=0; col<10; col++) {
                player_battlefield[i][row][col] = 0;
            }
        }
    }

    /* Prepare an object to be sent via AJAX request to update game_moves */
    var allShips = {data:[
        {game_id:<%=@game.id%>,from_user_id:<%= current_user.id %>,to_user_id:<%= current_user.id %>,row:-1,column:0,ship_alignment:0, type_of_move:1},
        {game_id:<%=@game.id%>,from_user_id:<%= current_user.id %>,to_user_id:<%= current_user.id %>,row:-1,column:1,ship_alignment:0, type_of_move:2},
        {game_id:<%=@game.id%>,from_user_id:<%= current_user.id %>,to_user_id:<%= current_user.id %>,row:-1,column:2,ship_alignment:0, type_of_move:3},
        {game_id:<%=@game.id%>,from_user_id:<%= current_user.id %>,to_user_id:<%= current_user.id %>,row:-1,column:3,ship_alignment:0, type_of_move:4},
        {game_id:<%=@game.id%>,from_user_id:<%= current_user.id %>,to_user_id:<%= current_user.id %>,row:-1,column:4,ship_alignment:0, type_of_move:5}]
    };

    /* Event for "Place" button */
    $("#placeButton").click(function() {
        placeShip(this.form);
    })

    /* When the player click on "Ready to play" button, it first checks that all 5 ships are placed.
     Then it sends AJAX requests of
     - ship positions (game_moves)
     - new player status (user_in_games)
     */
    $("#readyButton").click(function () {

        for (i=0; i<5; i++) {
            if (allShips.data[i].row == -1) {
                alert("Please place all ships first!!!");
                return;
            }
        }
        // Send ship positions AJAX call
        $.ajax({
            url:"/game_moves", // call "game_moves" controller
            type:"POST", // method "create"
            data: allShips
        });
        // Send ready notification AJAX call
        $.ajax({
            url:"/game_players/<%= @current_game_player_number %>",
            type:"PUT", // method "update"
            data: {status: 1} // Status: 1 = Ready
        });

        $("#placeShipForm").hide("slow");
    });

    /* Click to shoot */
    /* TODO: Now the player can shoot anytime, need to implement "Turn" */
    $('#myGrid td').click(function (e) {
        /* TODO: Check if it's current user's turn
         * If it's user's turn: Check whether it's a valid move (not yourself, not been shot before)
         *                      Check whether it's a hit or a miss
         *                      Then drawBattlefield()
         */
        //$(this).toggleClass("missed");
        //alert(this.id);

        // Extract cell's target_player_number from <td id=battlefield-number-row-cell>
        var splitted = this.id.split("-");
        var target_player_number = parseInt(splitted[1]);
        var target_row = parseInt(splitted[2]);
        var target_column = parseInt(splitted[3]);

        if (<%= @current_game_player_number %> != target_player_number) {

            var target_value = player_battlefield[target_player_number][target_row][target_column];

            switch (target_value) {
                case 0: // No ship here, this will be a miss
                    alert("Missed shot!");
                    $(this).addClass("missed");
                    player_battlefield[target_player_number][target_row][target_column] = 7;
                    // send to server
                    sendShootResultToServer(target_player_number,target_row,target_column,7); // Missed shot
                    break;
                case 1: // 1 to 5 are ship
                case 2:
                case 3:
                case 4:
                case 5:
                    alert("This is a hit!!!");
                    $(this).addClass("hit");
                    player_battlefield[target_player_number][target_row][target_column] = 6;
                    // send to server

                    //check whether the ship has sunk
                    //isShipSunk(target_value, target_player_number);

                    sendShootResultToServer(target_player_number,target_row,target_column,6); // Hit shot

                    break;
                case 6: // Hit already
                case 7: // Missed already
                    alert("You already have shot here.");
                    break;
            }
        }
    });

    /* Shoot */
    function sendShootResultToServer(target_player_number,target_row,target_column,value) {
        var dataToSend = {
            data:[
                {game_id:<%=@game.id%>,from_user_id:<%= current_user.id %>,target_player_number:target_player_number,row:target_row,column:target_column,ship_alignment:0, type_of_move:value}
            ]};

        // Send new cell value to server via AJAX call
        $.ajax({
            url:"/game_moves", // call "game_moves" controller
            type:"POST", // method "create"
            // TODO: have to change "fixed to_user_id"
            data: dataToSend
        });
    }

    /* After the player selected ship alignment, type, row, col and click on "Place".
     It check whether the ship is not off screen and collide with other ships.
     Then it paints the grid with a new ship position.
     */
    function placeShip(form) {
        var alignment = form.ship_alignment.value;
        var type = form.type_of_move.value;
        var row = form.ship_row.value;
        var col = form.ship_column.value;

        var sizeOfShip = 0;

        if (type == 5) {
            sizeOfShip = 5;
        } else if (type == 4) {
            sizeOfShip = 4;
        } else if (type == 3 || type == 2) {
            sizeOfShip = 3;
        } else if (type == 1) {
            sizeOfShip = 2;
        }

        var start_row = parseInt(row);
        var start_col = parseInt(col);
        var is_increase_row = (alignment == 1)?1:0;
        var is_increase_col = (alignment == 0)?1:0;

        if (isValidNewShipPosition(alignment, start_row,start_col,sizeOfShip,type))  {
            // Delete ship from old position (if exists)
            if (allShips.data[type-1].row > -1) {
                for (var c=0; c<10; c++)
                    for(var d = 0; d<10; d++)
                    {
                        // Clear from player_battlefield variable
                        player_battlefield[<%= @current_game_player_number %>][start_row+i*is_increase_row][start_col+i*is_increase_col] = 0;
                        // Clear from displaying grid
                        $("#battlefield-"+<%= @current_game_player_number %>+"-"+c+"-"+d).removeClass("ship"+type+"Placed");
                    }
            }

            // Replace data of ship in "allShips" object, which will be sent to server
            allShips.data[type-1].row = start_row;
            allShips.data[type-1].column = start_col;
            allShips.data[type-1].ship_alignment = alignment;
            allShips.data[type-1].type_of_move = type;
            //allShips.data[type-1] = {row:start_row,column:start_col,ship_alignment:alignment,type_of_move:type};
            //alert(allShips.data[type-1].ship_type+" row "+allShips.data[type-1].row+" column "+allShips.data[type-1].column);

            for (var i=0; i<sizeOfShip; i++) {
                // Update player_battlefield variable
                player_battlefield[<%= @current_game_player_number %>][start_row+i*is_increase_row][start_col+i*is_increase_col] = type;
                // Draw ship on battlefield
                $("#battlefield-"+<%= @current_game_player_number %>+"-"+(start_row+i*is_increase_row)+"-"+(start_col+i*is_increase_col)).addClass("ship"+type+"Placed");
            }
        } // end if isValidNewShipPosition()
    }

    /* Helper function for placeShip(), to check validity of ship position */
    function isValidNewShipPosition(alignment, start_row,start_col,sizeOfShip,type) {
        var is_increase_row = (alignment == 1)?1:0;
        var is_increase_col = (alignment == 0)?1:0;

        for (var c=0; c<sizeOfShip; c++) {
            //alert("#battlefield-"+player+"-"+(start_row+c*is_increase_row)+"-"+(start_col+c*is_increase_col));
            var row_to_check = start_row+c*is_increase_row;
            var col_to_check = start_col+c*is_increase_col;
            if ((row_to_check >= 0 && row_to_check < 10) && (col_to_check >= 0 && col_to_check < 10)) {
                var value_on_battlefield = player_battlefield[<%= @current_game_player_number %>][row_to_check][col_to_check];
                if (value_on_battlefield == 0 || value_on_battlefield == type) {
                    // current position is itself or no collision to other ships
                    // continue to next position, do nothing
                    continue;
                } else {
                    // there's something, alert and return false
                    alert("Collide with another ship");
                    return false;
                }
            } else {
                alert("Position out of screen");
                return false;
            }
        }

        return true;
    }


    // Activate player tab (bootstrap)
    // Initiate sendGameMovesAJAXRequest() on tab change
    $('#playerTab a').click(function (e) {
        // Make tab works
        e.preventDefault();
        $(this).tab('show');
        // TODO: make it bold

        // Extract target_player_number from <a href=player-number>
        var linkHref = $(this).attr("href");
        var splitted = linkHref.split("-");
        var target_player_number = parseInt(splitted[1]);

        requestGameMovesFromServer(<%= @current_game_player_number %>,target_player_number,<%=@game.id%>);
    })

    /* ********** Timer **************
        Set interval to refresh battlefield
     */
    var battlefieldRefreshTimer = setInterval(refreshBattlefield, 2000);
    function refreshBattlefield() {
        // no need to recall the function (it's an interval, it'll loop forever)
        // First, get active tab
        var linkHref = $("#playerTab li.active a").attr("href");
        var splitted = linkHref.split("-");
        var target_player_number = parseInt(splitted[1]);

        requestGameMovesFromServer(<%= @current_game_player_number %>,target_player_number,<%=@game.id%>);
    }

</script>
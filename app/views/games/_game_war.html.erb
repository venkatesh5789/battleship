
<!-- This code creates "player tabs" -->
<ul class="nav nav-tabs" id="playerTab">
  <% @game_players.each do |each_game_player| %>
      <% if each_game_player.status != $GAME_PLAYER_STATUS_OBSERVE %>
      <li class="<%= "active" if each_game_player.user.username.eql?(current_user.username)%>">
        <a href="#player-<%= each_game_player.player_number %>" data-toggle="tab">
          <%= each_game_player.user.username %><%= " (me)" if each_game_player.user.username.eql?(current_user.username) %>
        </a>
      </li>
      <% end %>
  <% end %>
</ul>

<!-- Draw all tabs -->
<div class="tab-content">

  <!-- Div for each tab content -->
  <% @game_players.each do |each_game_player| %>
      <% if each_game_player.status != $GAME_PLAYER_STATUS_OBSERVE %>
      <div class="tab-pane<%= " active" if each_game_player.user.username.eql?(current_user.username) %>"
           id="player-<%= each_game_player.player_number %>">

        <!-- Draw player's grid -->
        <table id="myGrid" class="table table-bordered battlefield">
          <tr>
            <th>&nbsp;</th>
            <% 10.times do |col_head| %>
                <th><%= col_head+1 %></th>
            <% end %>
          </tr>
          <% 10.times do |row| %>
              <tr>
                <th><%= (row+65).chr %></th>
                <% 10.times do |column| %>
                    <!-- Refer to each cell by using ID: battlefield-[player_number]-[row]-[column]
                      player_number: 0..n-1    ; n = number of players
                      row:    0..9
                      column: 0..9
                    -->
                    <td id="<%="battlefield-"+each_game_player.player_number.to_s+"-"+(row.to_s+"-"+column.to_s)%>">
                      &nbsp;&nbsp;&nbsp;
                    </td>
                <%end%>
              </tr>
          <%end%>
        </table>
      </div>
     <% end %>
  <% end %>
</div>


<script>

    // *** Important variables to be used in client will be initialized here ***
    var player_battlefield = new Array(<%=@game_players.count%>); // Initialize a 3D array [number of players] = 0..n-1

    // Initialize battlefield 2d-array for each player
    for (var i=0; i<player_battlefield.length; i++) {
        player_battlefield[i] = new Array(10); // array: [number of rows] = 0..9
        for (var row=0; row<10; row++) {
            player_battlefield[i][row] = new Array(10);    // array: [number of columns in a row] = 0..9
            for (var col=0; col<10; col++) {
                player_battlefield[i][row][col] = 0;
            }
        }
    }

    /* Click to shoot */
    $('#myGrid td').click(function (e) {
        // Check if he can play (game_player.status == READY && game_player.is_in_turn)
        switch (current_game_player_status) {
            case <%=$GAME_PLAYER_STATUS_READY%>:
                if (!current_game_player_is_in_turn) {
                    alert("Please wait for your turn!");
                    return;
                }
                break;
            case <%=$GAME_PLAYER_STATUS_LEFT%>: alert("You cannot place any move.\n\nYou have left this game."); return;
            case <%=$GAME_PLAYER_STATUS_LOST%>: alert("You cannot place any move.\n\nYou have lost."); return;
            case <%=$GAME_PLAYER_STATUS_WON%>: alert("You cannot place any move.\n\nYou have won."); return;
        }

        // Extract cell's target_player_number from <td id=battlefield-number-row-cell>
        var splitted = this.id.split("-");
        var target_player_number = parseInt(splitted[1]);
        var target_row = parseInt(splitted[2]);
        var target_column = parseInt(splitted[3]);

        if (<%= @current_game_player_number %> != target_player_number) {

            var target_value = player_battlefield[target_player_number][target_row][target_column];

            switch (target_value) {
                case 0: // No ship here, this will be a missed shot

                    // *** Prevent player from making multiple moves ***
                    grid_is_locked = true;
                    current_game_player_is_in_turn = false;
                    $("#statusbar").html("<h2>Sending the move...</h2>");

                    //alert("Missed shot!");
                    $(this).addClass("missed");
                    // Paint that cell
                    player_battlefield[target_player_number][target_row][target_column] = <%=$GAME_MOVE_TYPE_MISSED%>;
                    // Send missed to server
                    sendShootResultToServer(target_player_number,target_row,target_column,<%=$GAME_MOVE_TYPE_MISSED%>); // Missed shot

                    break;
                case 1: // 1 to 5 are ship
                case 2:
                case 3:
                case 4:
                case 5:

                    // *** Prevent player from making multiple moves ***
                    grid_is_locked = true;
                    current_game_player_is_in_turn = false;
                    $("#statusbar").html("<h2>Sending the move...</h2>");

                    // Paint that cell
                    $(this).addClass("hit");

                    //check whether the ship has sunk
                    // target_value: type of ship
                    var ship_sunk_number = 0;

                    // Change the value in battlefield from "ship number" to "hit" first
                    player_battlefield[target_player_number][target_row][target_column] = <%=$GAME_MOVE_TYPE_HIT%>;

                    // Check for ship sunk after changed value to "hit"
                    if(isShipSunk(target_value, target_player_number)) {
                        ship_sunk_number = target_value;

                        // Send ship is sunk notification AJAX call
                        $.ajax({
                            url:"/game_players/0",
                            type:"PUT", // method "update"
                            data: {game_id: <%=params[:id]%>, player_number: target_player_number, ship_sunk_number: ship_sunk_number}
                        });
                    }

                    // Send hit to server: sendShootResultToServer
                    //  target_player_number: player number that got a shot
                    //  target_row: shot row position
                    //  target_column: shot column position
                    //  $GAME_MOVE_TYPE_HIT: a constant for "hit" value
                    //  ship_sunk_number:   0 if this shot doesn't sink the ship. 1-5 if sink
                    sendShootResultToServer(target_player_number,target_row,target_column,<%=$GAME_MOVE_TYPE_HIT%>,ship_sunk_number); // Hit shot

                    break;
                case 6: // Hit already
                case 7: // Missed already
                    alert("You already have shot here.");
                    break;
            }
        }
    });

    function isShipSunk(target_value, target_player_number) {
        var battle = player_battlefield[target_player_number];

        for(var i= 0; i<10; i++) {
            for (var j = 0; j<10; j++) {
                if (battle[i][j] == target_value) {
                    return false;
                }
            }
        }
        return true;
    }

    /* Shoot
    * Send [data] to server, to update "GameMove"
    * */
    function sendShootResultToServer(target_player_number,target_row,target_column,value,ship_sunk_number) {
        var dataToSend = {
            // Must send data in an array for compatibility issue with multiple ship placement
            // So, this will be sent in array length of 1
            data:[
                {
                    // Game ID
                    game_id:<%=@game.id%>,
                    // Shoot from who? (User ID)
                    from_user_id:<%= current_user.id %>,
                    // Shoot to whom? (Player number, this will be converted to user ID
                    // because game_moves table needs to_user_id
                    target_player_number:target_player_number,
                    // Target row
                    row:target_row,
                    // Target column
                    column:target_column,
                    // This must be 0, because it's not ship placement
                    ship_alignment:0,
                    // Value will be HIT or MISSED (6 or 7)
                    type_of_move:value,
                    // If ship is not sunk: 0, Otherwise: ship number (1,2,3,4,5)
                    ship_sunk_number:ship_sunk_number
                }
            ]};

        // Send new cell value to server via AJAX call
        $.ajax({
            url:"/game_moves", // call "game_moves" controller
            type:"POST", // method "create"
            data: dataToSend
        });
    }

    /* Helper function for placeShip(), to check validity of ship position */
    function isValidNewShipPosition(alignment, start_row,start_col,sizeOfShip,type) {
        var is_increase_row = (alignment == 1)?1:0;
        var is_increase_col = (alignment == 0)?1:0;

        for (var c=0; c<sizeOfShip; c++) {
            //alert("#battlefield-"+player+"-"+(start_row+c*is_increase_row)+"-"+(start_col+c*is_increase_col));
            var row_to_check = start_row+c*is_increase_row;
            var col_to_check = start_col+c*is_increase_col;
            if ((row_to_check >= 0 && row_to_check < 10) && (col_to_check >= 0 && col_to_check < 10)) {
                var value_on_battlefield = player_battlefield[<%= @current_game_player_number %>][row_to_check][col_to_check];
                if (value_on_battlefield == 0 || value_on_battlefield == type) {
                    // current position is itself or no collision to other ships
                    // continue to next position, do nothing
                    continue;
                } else {
                    // there's something, alert and return false
                    alert("Collide with another ship");
                    return false;
                }
            } else {
                alert("Position out of screen");
                return false;
            }
        }

        return true;
    }

    // ********* Activate player tab (bootstrap tab) ***********
    // Initiate sendGameMovesAJAXRequest() on tab change
    $('#playerTab a').click(function (e) {
        // Make tab works
        e.preventDefault();
        $(this).tab('show');
        // TODO: make it bold

        // Extract target_player_number from <a href=player-number>
        var linkHref = $(this).attr("href");
        var splitted = linkHref.split("-");
        var target_player_number = parseInt(splitted[1]);

        requestGameMovesToDrawGrid(<%= @current_game_player_number %>,target_player_number,<%=@game.id%>);
    })


    /* ********** Timers **************
     Set interval to refresh battlefield
     */
    var battlefieldRefreshTimer = setInterval(refreshBattlefield, 1000);
    function refreshBattlefield() {
        // no need to recall the function (it's an interval, it'll loop forever)
        // First, get active tab
        var linkHref = $("#playerTab li.active a").attr("href");
        var splitted = linkHref.split("-");
        var target_player_number = parseInt(splitted[1]);

        requestGameMovesToDrawGrid(<%= @current_game_player_number %>,target_player_number,<%=@game.id%>);
    }

    // Update game notification status (game_war)
    function updateGameStatusBar(json_response) {
        var my_game_player,game_player_in_turn;

        // Get my game_player & game_player who's in turn
        for (var i=0; i<json_response.length; i++) {
            var game_player = json_response[i];
            if (game_player.player_number == <%=@current_game_player_number%>) {
                my_game_player = game_player;
            }
            if (game_player.is_in_turn) {
                game_player_in_turn = game_player;
            }
        }

        // Show status bar
        switch (my_game_player.status) {
            case (<%=$GAME_PLAYER_STATUS_READY%>):
                // If I'm still in the game (ready)
                if (my_game_player == game_player_in_turn) {
                    // If I've got the turn: Status bar shows "Your turn!"
                    $("#statusbar").html("<h2>*** Your turn. Fire in the hole! ***</h2>");
                } else {
                    // If it's other's turn: Status bar shows "Please wait for
                    $("#statusbar").html("<h2>Please wait for "+game_player_in_turn.username+" to make a move.</h2>");
                }
                break;
            case (<%=$GAME_PLAYER_STATUS_LEFT%>): $("#statusbar").html("<h2>You have left this game. You cannot make any moves.</h2>"); break;
            case (<%=$GAME_PLAYER_STATUS_LOST%>): $("#statusbar").html("<h2>You have lost! That's all.</h2>"); break;
            case (<%=$GAME_PLAYER_STATUS_WON%>): $("#statusbar").html("<h2>Hooray! You have won!</h2>"); break;
        }

    }

</script>
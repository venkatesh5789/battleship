
<div class="center">
  <h1>Current Game</h1>
</div>
<div class="row">
  <div class="span2">
    <div id="player-window">
      <h2>Players</h2>
      <table class="table table-striped">
        <thead>
        <tr>
          <th>Name</th>
          <th>Status</th>
        </tr>
        </thead>
        <tbody>
            <%= render @game_players %>
        </tbody>
      </table>
    </div>
    <div id="chat-window" >
      <h2>Chat</h2>
      <ul>
          <li><b>Knotty: </b>Once upon a time, in a galaxy far far away..</li>
          <li><b>Venky: </b>hey that is from Star Wars, not Battleship.</li>
      </ul>
      <%= form_tag("#", :class=>"form-inline", :remote=>"true") do %>
        <%= text_field_tag :message,"",placeholder:"type message..",class:"input-medium" %>
          <%= button_tag :send %>
      <% end %>
    </div>
  </div>
  <div class="span10">

    <div class="btn-group">
      <a class="btn dropdown-toggle" data-toggle="dropdown" href="#">
        Current game name
        <span class="caret"></span>
      </a>
      <ul class="dropdown-menu">
        <!-- dropdown menu links -->
      </ul>
    </div>


    <div class="span5">

      <!-- This code creates "player tabs" -->
      <!-- TODO: Replace 'Venky' with 'current player name' to make a default selected tab -->
      <ul class="nav nav-tabs" id="playerTab">
        <% @game_players.each do |each_user_in_game| %>
            <li class="<%= "active" if each_user_in_game.user.name.eql?("Venky")%>">
              <a href="#player-<%= each_user_in_game.id %>" data-toggle="tab">
                <%= each_user_in_game.user.name %><%= " (me)" if each_user_in_game.user.name.eql?("Venky") %>
              </a>
            </li>
        <% end %>
      </ul>

      <!-- Draw all tabs -->
      <div class="tab-content">

        <!-- Div for each tab content -->
        <% @game_players.each do |each_user_in_game| %>

            <!-- TODO: Replace "Venky" with current user name (need a helper?) -->
            <div class="tab-pane<%= " active" if each_user_in_game.user.name.eql?("Venky") %>" id="player-<%= each_user_in_game.id %>">
              <h3><%= each_user_in_game.user.name %></h3>

              <!-- Draw player's grid -->
              <table id="myGrid" class="table table-bordered battlefield table-hover">
                <tr>
                  <th>&nbsp;</th>
                  <% 10.times do |col_head| %>
                      <th><%= col_head+1 %></th>
                  <% end %>
                </tr>
                <% 10.times do |row| %>
                    <tr>
                      <th><%= (row+65).chr %></th>
                      <% 10.times do |col| %>
                          <!-- TODO: implement a mechanism so that it becomes battlefield-<current player id>-->
                          <td id="<%="battlefield-0-"+(row.to_s+"-"+col.to_s)%>">
                            &nbsp;&nbsp;&nbsp;
                          </td>
                      <%end%>
                    </tr>
                <%end%>
              </table>

              <!-- Place ships form -- only show if it's current player -->
              <!-- TODO: Replace "Venky" with current user name (need a helper?) -->
              <% if each_user_in_game.user.name.eql?("Venky") %>

                  <!-- Form to place ships -->
                  <div id="placeShipForm">
                    <%= form_tag("#", :class=>"form-inline") do %>

                        <%= select_tag(:ship_alignment,options_for_select([['H',0],['V',1]]), :class=>"input-mini") %>

                        <%= select_tag(:ship_type,options_for_select([
                                                                             ['Carrier', 5],
                                                                             ['Battleship', 4],
                                                                             ['Destroyer', 3],
                                                                             ['Submarine', 2],
                                                                             ['Patrol Boat', 1]
                                                                     ]), :class=>"input-small") %>

                        <%= select_tag(:ship_row,options_for_select([
                                                                            ['A',0],
                                                                            ['B',1],
                                                                            ['C',2],
                                                                            ['D',3],
                                                                            ['E',4],
                                                                            ['F',5],
                                                                            ['G',6],
                                                                            ['H',7],
                                                                            ['I',8],
                                                                            ['J',9]
                                                                    ]), :class=>"input-mini") %>

                        <%= select_tag(:ship_column,options_for_select([
                                                                               ['1',0],
                                                                               ['2',1],
                                                                               ['3',2],
                                                                               ['4',3],
                                                                               ['5',4],
                                                                               ['6',5],
                                                                               ['7',6],
                                                                               ['8',7],
                                                                               ['9',8],
                                                                               ['10',9],
                                                                       ]), :class=>"input-mini") %>
                        <!--%= text_field_tag(:ship_row,"", :placeholder=>"Row",:class=>"span1") %-->
                        <!--%= text_field_tag(:ship_col,"", :placeholder=>"Col", :class=>"span1") %-->
                        <%= button_tag('Place', :type => 'button', :onclick => "placeShip(this.form)") %>
                        <%= button_tag(:id => 'readyButton', :type => 'button') { content_tag :strong, 'Ready to play' } %>
                    <% end %>
                  </div>
               <% end %>
            </div>
        <% end %>
      </div>

    </div>
    <div class="span3">
      <h3>Game moves</h3>
      <ol id="game-moves-feed">
      </ol>
    </div>
  </div>

</div>

<script>
  /* TODO: replace this with "current user id" minus 1 (for use with array)
  * this must be from "Session" variable */
  var current_player = 0;

    var player_battlefield = new Array(<%=@game_players.count%>); // Initialize a 3D array [number of players] = 0..n-1
    // initialize battlefield 2d-array for each player
    for (var i=0; i<player_battlefield.length; i++) {
        player_battlefield[i] = new Array(10); // array: [number of rows] = 0..9
        for (var row=0; row<10; row++) {
            player_battlefield[i][row] = new Array(10);    // array: [number of columns in a row] = 0..9
            for (var col=0; col<10; col++) {
                player_battlefield[i][row][col] = 0;
            }
        }
    }

    /* Prepare an object to be sent via AJAX request to update game_moves */
  var allShips = {data:[{row:-1,column:0,ship_alignment:0, ship_type:1},
      {row:-1,column:0,ship_alignment:0, ship_type:2},
      {row:-1,column:0,ship_alignment:0, ship_type:3},
      {row:-1,column:0,ship_alignment:0, ship_type:4},
      {row:-1,column:0,ship_alignment:0, ship_type:5}]};

    /* When the player click on "Ready to play" button, it first checks that all 5 ships are placed.
        Then it sends AJAX requests of
        - ship positions (game_moves)
        - new player status (user_in_games)
     */
    $("#readyButton").click(function () {

        for (i=0; i<5; i++) {
            if (allShips.data[i].row == -1) {
                alert("Please place all ships first!!!");
                return;
            }
        }
        $.ajax({
            url:"/game_moves", // call "game_moves" controller
            type:"POST", // method "create"
            data: allShips
        });
        $.ajax({
            url:"/game_players/0", // call "user_in_game" controller with "dummy" user_in_game's primary key in order to call "update"
            type:"PUT", // method "update"
            data: {user_id:1, status: 1} // TODO: replace user_id:1 with current user_id (session)
        });

        $("#placeShipForm").hide("slow");
    });

    /* TODO: click to shoot */
    $('#myGrid td').on('click', function (e) {

        //$('#myGrid td').addClass("missed");
        //alert(e.target.id);
        e.target.className += "missed";
    });

    /* After the player selected ship alignment, type, row, col and click on "Place".
        It check whether the ship is not off screen and collide with other ships.
        Then it paints the grid with a new ship position.
     */
    function placeShip(form) {
        var alignment = form.ship_alignment.value;
        var type = form.ship_type.value;
        var row = form.ship_row.value;
        var col = form.ship_column.value;
        //alert(form.ship_alignment.value);
        //alert(form.ship_type.value);

        //alert(form.ship_row.value);
        //alert(form.ship_col.value);

        var sizeOfShip = 0;

        if (type == 5) {
            sizeOfShip = 5;
        } else if (type == 4) {
            sizeOfShip = 4;
        } else if (type == 3 || type == 2) {
            sizeOfShip = 3;
        } else if (type == 1) {
            sizeOfShip = 2;
        }

        var start_row = parseInt(row);
        var start_col = parseInt(col);
        var is_increase_row = (alignment == 1)?1:0;
        var is_increase_col = (alignment == 0)?1:0;

        if (isValidMove(alignment, start_row,start_col,sizeOfShip,type))  {
            // Delete ship from old position (if exists)
            if (allShips.data[type-1].row > -1) {
                for (var c=0; c<100; c++)
                    for(var d = 0; d<100; d++)
                    {
                        // Clear
                        $("#battlefield-"+current_player+"-"+c+"-"+d).removeClass("ship"+type+"Placed");
                    }
            }

            // Replace data of ship in "allShips" object, which will be sent to server
            allShips.data[type-1] = {row:start_row,column:start_col,ship_alignment:alignment,ship_type:type};
            //alert(allShips.data[type-1].ship_type+" row "+allShips.data[type-1].row+" column "+allShips.data[type-1].column);

            for (var c=0; c<sizeOfShip; c++) {
                // Draw ship on battlefield
                //alert("#battlefield-"+player+"-"+(start_row+c*is_increase_row)+"-"+(start_col+c*is_increase_col));
                player_battlefield[current_player][start_row+c*is_increase_row][start_col+c*is_increase_col] = type;
                $("#battlefield-"+current_player+"-"+(start_row+c*is_increase_row)+"-"+(start_col+c*is_increase_col)).addClass("ship"+type+"Placed");
            }
            //alert("return false 2");
            return false;
        } else {
            //alert("return false");
            return false;
        }

        /* Helper function for placeShip(), to check validity of ship position */
        function isValidMove(alignment, start_row,start_col,sizeOfShip,type) {
            var is_increase_row = (alignment == 1)?1:0;
            var is_increase_col = (alignment == 0)?1:0;

            for (var c=0; c<sizeOfShip; c++) {
                //alert("#battlefield-"+player+"-"+(start_row+c*is_increase_row)+"-"+(start_col+c*is_increase_col));
                var row_to_check = start_row+c*is_increase_row;
                var col_to_check = start_col+c*is_increase_col;
                if ((row_to_check >= 0 && row_to_check < 10) && (col_to_check >= 0 && col_to_check < 10)) {
                    var value_on_battlefield = player_battlefield[current_player][row_to_check][col_to_check];
                    if (value_on_battlefield == 0 || value_on_battlefield == type) {
                        // current position is itself or no collision to other ships
                        // continue to next position, do nothing
                        continue;
                    } else {
                        // there's something, alert and return false
                        alert("Your new ship collides with another ship, please select a new position.");
                        return false;
                    }
                } else {
                    alert("Your new ship position is invalid because it is out of the battlefield.");
                    return false;
                }
            }

            return true;
        }

    }

  function sendGameMovesAJAXRequest(current_player_id,target_player_id,game_id) {
      $.ajax({
          url:"/game_moves", // call "game_moves" controller
          type:"GET", // method "create"
          data: allShips
      });
  }

    // Activate player tab
  $('#playerTab a').click(function (e) {
      e.preventDefault();
      $(this).tab('show');
      // TODO: call "send ajax game moves request for current player"
      var linkHref = $(this).attr("href");
      var splitted = linkHref.split("-");
      var target_player_id = parseInt(splitted[1]);
      alert(target_player_id);

  })
  /*$(function () {
      //e.preventDefault();
      $('#playerTab a').tab('show');
      //$('#playerTab a').onclick = alert('lll');
  })  */

</script>
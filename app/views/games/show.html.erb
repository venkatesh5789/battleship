<div id="main" class="container">
  <div class="center">
    <h1><%= @game.name %></h1>
  </div>

  <div class="row">
    <div class="span2">
      <div id="joinedGamesDropdown" class="btn-group">
        <a id="dropdownButton" class="btn dropdown-toggle" data-toggle="dropdown" href="#">
          Switch game
          <span class="caret"></span>
        </a>
        <ul class="dropdown-menu">
          <!-- dropdown menu links -->
          <% @user_joined_games.each do |each_joined_game| %>
              <% if @game.id != each_joined_game.game_id %>
                  <% game = Game.find(each_joined_game.game_id) %>
                  <%= link_to game.name, game %>
              <% end%>
          <% end %>
        </ul>
      </div>
      <br>&nbsp;<br>
      <div id="player-window">
        <%= render 'game_players/game_players_table' %>
      </div>

      <h2>Legend</h2>
      <table class="legend battlefield">
        <tr>
          <td>
            <table class="ship5Placed" border="1" bordercolor="gray">
              <tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
            </table>
          </td>
          <td>Carrier</td>
        </tr>
        <tr>
          <td>
            <table border="1" class="ship4Placed" bordercolor="gray">
              <tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
            </table>
          </td>
          <td>Battleship</td>
        </tr>
        <tr>
          <td>
            <table border="1" class="ship3Placed" bordercolor="gray">
              <tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
            </table>
          </td>
          <td>Destroyer</td>
        </tr>
        <tr>
          <td>
            <table border="1" class="ship2Placed" bordercolor="gray">
              <tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
            </table>
          </td>
          <td>Submarine</td>
        </tr>
        <tr>
          <td>
            <table border="1" class="ship1Placed" bordercolor="gray">
              <tr><td>&nbsp;</td><td>&nbsp;</td></tr>
            </table>
          </td>
          <td>Patrol boat</td>
        </tr>
        <tr>
          <td>
            <table border="1" class="hit">
              <tr><td>&nbsp;</td></tr>
            </table>
          </td>
          <td>Hit</td>
        </tr>
        <tr>
          <td>
            <table border="1" class="missed">
              <tr><td>&nbsp;</td></tr>
            </table>
          </td>
          <td>Missed</td>
        </tr>
      </table>
      <br><br><br><br><br><br><br><br><br><br><br><br><br><br><br>&nbsp;
    </div>

    <div class="span6">
      <div id="statusbar">
        <h2>&nbsp;</h2>
      </div>
      <% if @game.status == $GAME_STATUS_WAITING %>
          <%# Render game_prep if the game is preparing %>
          <%= render 'games/game_prep' %>
      <% elsif @game.status == $GAME_STATUS_STARTED || @game.status == $GAME_STATUS_FINISHED %>
          <%# Render game_war if the game has started or finished %>
          <%= render 'games/game_war' %>
      <% end %>
    </div>

    <div class="span4" style="border-width: 2px;border-color: #a52a2a;">
      <div>
        <h3>Game moves</h3>
        <!-- Game moves notification -->
        <ol id="game-moves-feed" style="background-color: black;"></ol>
      </div>
      <div>
        <h3>Chat</h3>
        <!-- Chat -->
        <ol id="chat-content" style="background-color: black;">
            <%= render(@all_chat_messages)%>
        </ol>
        <%= form_tag("#", :class=>"form-inline", :remote=>"true") do %>
            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
            <%= text_field_tag :message,"",placeholder:"type message..",class:"input-medium",autocomplete:"off" %>
            &nbsp;<%= button_tag(:id => 'sendButton', :type => 'submit') { content_tag :strong, 'send' } %>
        <% end %>
      </div>
    </div>

  </div>


</div>
<script>
    // *** Important variables to be used in client will be initialized here ***
    // Initialize current player's ship sunk status
    var isShip1Sunk = <%=@current_game_player.is_ship1_sunk?%>;
    var isShip2Sunk = <%=@current_game_player.is_ship2_sunk?%>;
    var isShip3Sunk = <%=@current_game_player.is_ship3_sunk?%>;
    var isShip4Sunk = <%=@current_game_player.is_ship4_sunk?%>;
    var isShip5Sunk = <%=@current_game_player.is_ship5_sunk?%>;

    var current_game_player_status = <%=@current_game_player_status%>;
    var current_game_player_is_in_turn = <%= (@current_game_player.is_in_turn?) ? "true" : "false" %>;
    /* Multiple moves prevention
     New game_player response comes
     if (incoming is_in_turn == T && grid_is_locked == T)
     is_in_turn => F
     if (incoming is_in_turn == T && grid_is_locked == F)
     is_in_turn => T
     if (incoming is_in_turn == F && grid_is_locked == T)
     is_in_turn => F, grid_is_locked => F
     if (incoming is_in_turn == F && grid_is_locked == F)
     is_in_turn => F
     */
    var grid_is_locked = false;

    // For game move notification and tab lights up
    var blinkCount = 0;
    var recentGameMoveID = 0;


    // Send request for game moves to draw battlefield grid
    function requestGameMovesToDrawGrid(from_game_player_number,to_game_player_number,game_id) {
        $.ajax({
            // For drawing grid: format = JSON
            url: "/game_moves.json",
            data: {
                from_game_player_number: from_game_player_number,
                to_game_player_number: to_game_player_number,
                game_id: game_id
            },
            cache: false
        }).done(function( response ) {
                    // Send JSON response to this function to update battlefield, which will call drawBattlefield
                    updateAndRedrawBattlefield(response);
                });
    }

    // Update player_battlefield variable (in client-side) from JSON response
    function updateAndRedrawBattlefield(json_response) {

        var length = json_response.length;
        var element = null;
        for (var i = 0; i < length; i++) {
            element = json_response[i];

        <% if @game.status == $GAME_STATUS_WAITING %>
        <%# Game preparation: Draw to current player only %>
        <%= "player_battlefield[0][element.row][element.column] = element.type_of_move;" %>
        <% else %>
        <%# Game war: Draw to target player %>
        <%= "player_battlefield[element.to_game_player_number][element.row][element.column] = element.type_of_move;" %>
        <% end %>
        }
        redrawBattlefield();
    }

    // Draw (update cell color) battlefield to be corresponded with value in player_battlefield
    function redrawBattlefield() {
        for (var p = 0; p < player_battlefield.length; p++) {
            for (var row = 0; row < 10; row++) {
                for (var column = 0; column < 10; column++) {
                    // Shorthand for cell
                    var targetCell = $("#battlefield-"+p+"-"+row+"-"+column);
                    // Remove all classes (CSS) from that cell
                    targetCell.removeClass();
                    /* Value
                     0: Nothing
                     1: Patrol boat
                     2: Submarine
                     3: Destroyer
                     4: Battleship
                     5: Carrier
                     6: Hit
                     7: Missed
                     */
                    switch (player_battlefield[p][row][column]) {
                        case 0: // Nothing
                            break;
                        case 1:
                        case 2:
                        case 3:
                        case 4:
                        case 5:
                            // Show ship position only if drawing current player's table
                            // This condition applies to only game when the STARTED
                        <% if @game.status == $GAME_STATUS_STARTED %>
                        <%= "if (" + @current_game_player_number.to_s + " == p)" %>
                        <% end %>
                            targetCell.addClass("ship"+player_battlefield[p][row][column]+"Placed");
                            break;
                        case 6: // hit
                            targetCell.addClass("hit");
                            break;
                        case 7: // missed
                            targetCell.addClass("missed");
                            break;
                    }
                }
            }
        }
    }

    // Send request for game moves notifications update
    // This will call JavaScript code in "index.js.erb" that will refresh the Game Moves Notifications window
    // that "index.js.erb" code is exactly the same as in "create.js.erb"
    function requestGameMovesNotifications(from_game_player_number,to_game_player_number,game_id) {
        $.ajax({
            // For Notification: format = JS
            url: "/game_moves.js",
            data: {
                game_id: game_id
            },
            cache: false
        }).done(function( response ) {
                    // response is javascript, nothing to do with response
                });

    }

    // Update game moves notification from JSON response
    function updateGameMovesNotification(json_response) {
        $("#game-moves-feed").empty()

        var length = json_response.length;
        var game_move = null;
        for (var i = 0; i < length; i++) {
            game_move = json_response[i];

            var result = "<li>";
            if (game_move.type_of_move >= 1 && game_move.type_of_move <= 5) {
                // it is ship placement
                result += "Placed <b>";
                switch (game_move.type_of_move) {
                    case 5: result += "Aircraft Carrier"; break;
                    case 4: result += "Battleship"; break;
                    case 3: result += "Destroyer"; break;
                    case 2: result += "Submarine"; break;
                    case 1: result += "Patrol Boat"; break;
                }
                switch (game_move.ship_alignment) {
                    case 0: result += "horizontal"; break;
                    case 1: result += "vertical"; break;
                }
                result += "</b> at <b>"+String.fromCharCode(game_move.row+65)+(game_move.column+1)+"</b>";
            } else {
                // it is hit or missed
                result += "<b>";
                switch (game_move.type_of_move) {
                    case 6: result += "Hit"; break;
                    case 7: result += "Missed"; break;
                }
                result += "</b> at <b>"+String.fromCharCode(game_move.row+65)+(game_move.column+1)+"</b>";
            }
            result += "</li>";


            $("#game-moves-feed").prepend(result);
        }
    }

    // Send request for game players
    function requestGamePlayersFromServer(game_id) {
        // GamePlayer - index
        $.ajax({
            url: "/game_players.json",
            data: {
                game_id: game_id
            },
            cache: false
        }).done(function( response ) {
                    updateGamePlayersTable(response);
                    updateCurrentPlayerStatusAndTurn(response);
                    checkForMoreThanOnePlayer(response);
                    // This function is different in "game_prep" and "game_war"
                    updateGameStatusBar(response);

                    // Send JSON response to this function to update battlefield, which will call drawBattlefield
                    if (current_game_player_status == <%=$GAME_PLAYER_STATUS_READY%>) {
                        // This will also update game player status, so it needs to be the last thing to do
                        checkForShipSunkAndUpdateStatus(response);
                    }
                });
    }

    // Check and alert for new ship sunk, for current player only
    function checkForShipSunkAndUpdateStatus(json_response) {
        // Get current player's record
        var my_game_player;
        for (var i=0; i<json_response.length; i++) {
            // Look for data of current player only
            var game_player = json_response[i];
            if (game_player.player_number == <%=@current_game_player_number%>) {
                my_game_player = game_player;
                break;
            }
        }

        // Check for change in ship sunk status
        if (!isShip1Sunk && game_player.is_ship1_sunk) {
            alert("Your Patrol Boat has just been sunk!!!");
            isShip1Sunk = true;
        }
        if (!isShip2Sunk && game_player.is_ship2_sunk) {
            alert("Your Submarine has just been sunk!!!");
            isShip2Sunk = true;
        }
        if (!isShip3Sunk && game_player.is_ship3_sunk) {
            alert("Your Destroyer has just been sunk!!!");
            isShip3Sunk = true;
        }
        if (!isShip4Sunk && game_player.is_ship4_sunk) {
            alert("Your Battleship has just been sunk!!!");
            isShip4Sunk = true;
        }
        if (!isShip5Sunk && game_player.is_ship5_sunk) {
            alert("Your Carrier has just been sunk!!!");
            isShip5Sunk = true;
        }
        // Check if every ship has been sunk & my status hasn't been set to LOST
        if (isShip1Sunk && isShip2Sunk && isShip3Sunk && isShip4Sunk && isShip5Sunk &&
                current_game_player_status != <%=$GAME_PLAYER_STATUS_LOST%>) {
            // for debugging purpose
            alert("YOU HAVE LOST!");
            // Tell server that I've lost!
            $.ajax({
                url:"/game_players/<%= @current_game_player.id %>",
                type:"PUT", // method "update"
                data: {status: <%=$GAME_PLAYER_STATUS_LOST%>}
            });
            // Then change my status to LOST
            current_game_player_status = <%=$GAME_PLAYER_STATUS_LOST%>;
            // Check for winner -- there must be only 1 player with status == "$GAME_PLAYER_STATUS_READY"
            var readyCount = 0;
            var potentialWinner = null;
            for (var i=0; i<json_response.length; i++) {
                var game_player = json_response[i];
                // Remember to skip checking myself, because I've lost!
                if (game_player != my_game_player && game_player.status == <%=$GAME_PLAYER_STATUS_READY%>) {
                    readyCount++;
                    if (readyCount > 1) {
                        break;
                    }
                    potentialWinner = game_player;
                }
            }
            if (readyCount == 1) {
                //alert("we found the winner! "+potentialWinner.username);
                // Now, we've found the winner! Tell server that he has won!!
                $.ajax({
                    url:"/game_players/"+potentialWinner.id,
                    type:"PUT", // method "update"
                    data: {status: <%=$GAME_PLAYER_STATUS_WON%>}
                });
            }
        }
    }

    function updateGamePlayersTable(json_response) {

        // Check if everyone is ready -> refresh
        // Otherwise (someone still not ready) just update "Game Players Table"
        var isEveryoneReady = true;
        for (var i=0; i<json_response.length; i++) {
            var game_player = json_response[i];
            if (game_player.status == <%=$GAME_PLAYER_STATUS_WAITING%>) {
                isEveryoneReady = false;
                break;
            }
        }

        $("#player-window table").empty();

        var result = "";

        // Update "game players" table
        for (var i=0; i<json_response.length; i++) {
            var game_player = json_response[i];

            // Open the row
            result += "<tr class='";
            if (game_player.is_in_turn) {
                // if that player is in turn, class = "player_in_turn" (green background)
                result += "player_in_turn";
            }
            result += "'>";
            // Player name
            result += "<td>";
            if (game_player.player_number == <%=@current_game_player_number%>) {
                // BOLD if it's himself
                result += "<b>"+game_player.username+"</b>"
            } else {
                result += game_player.username;
            }
            result += "</td>";
            // Status
            result += "<td>";
            switch (game_player.status) {
                case <%=$GAME_PLAYER_STATUS_WAITING%>: result += "<%=$GAME_PLAYER_STATUS_WAITING_TEXT%>"; break;
                case <%=$GAME_PLAYER_STATUS_READY%>: result += "<b><%=$GAME_PLAYER_STATUS_READY_TEXT%></b>"; break;
                case <%=$GAME_PLAYER_STATUS_LEFT%>: result += "<%=$GAME_PLAYER_STATUS_LEFT_TEXT%>"; break;
                case <%=$GAME_PLAYER_STATUS_LOST%>: result += "<%=$GAME_PLAYER_STATUS_LOST_TEXT%>"; break;
                case <%=$GAME_PLAYER_STATUS_WON%>: result += "<%=$GAME_PLAYER_STATUS_WON_TEXT%>"; break;
                case <%=$GAME_PLAYER_STATUS_OBSERVE%>: result += "<%=$GAME_PLAYER_STATUS_OBSERVE_TEXT%>"; break;
            }
            result += "</td>";
            // Close the row
            result += "</tr>";
        }

        $("#player-window table").append(result);

        // If everyone is ready and game is in game_prep --> refresh the page
        if (isEveryoneReady) {
            var isInPreparation = <%= @game.status == $GAME_STATUS_WAITING ? "true" : "false" %>;
            if (isInPreparation) {
                // Everyone is ready, refresh! (the refreshed page will have game.status == 1)
                // TODO: add countdown timer here!!!
                window.location.reload();
            }
        }
    }

    function updateCurrentPlayerStatusAndTurn(json_response) {
        for (var i=0; i<json_response.length; i++) {
            game_player = json_response[i];
            if (game_player.player_number == <%=@current_game_player_number%>) {
                // Got myself
                // Now, update my status
                current_game_player_status = game_player.status;
                // And update my is_in_turn.. but you need to check grid_is_locked
                if (grid_is_locked) {
                    if (game_player.is_in_turn) {
                        current_game_player_is_in_turn = false;
                    } else {
                        current_game_player_is_in_turn = false;
                        grid_is_locked = false;
                    }
                } else {
                    if (game_player.is_in_turn) {
                        current_game_player_is_in_turn = true;
                    } else {
                        current_game_player_is_in_turn = false;
                    }
                }
                break;
            }
        }
    }

    // Check if the game is "waiting". There must be more than 1 player in the game to start.
    // If there's 1 player --> disable "Ready to Player" button
    function checkForMoreThanOnePlayer(json_response) {
        if (<%= @game.status == $GAME_STATUS_WAITING ? "true" : "false" %>) {
            // Game status is waiting.. check for number of players
            if (json_response.length > 1) {
                $("#readyButton").html('<strong>Ready to play</strong>');
                $("#readyButton").removeAttr('disabled');
            } else {
                $("#readyButton").html('Minimum 2 players are needed to play.');
                $("#readyButton").attr('disabled', 'disabled');
            }
        }
    }

    // =========== Check turn in other games ==========
    function requestCheckTurn(user_id) {
        $.ajax({
            url:"/users/"+user_id+".js?current_game_id="+<%=@game.id%>,
            type:"GET" // method "show"
        });
    }

    // ********* CHAT ***************
    $("#chat-content").scrollTop($("#chat-content").height()*20);
    $("#sendButton").click(function () {
        if ($("#message").val() != "") {
            $.ajax({
                url:"/chats", // call "chats" controller
                type:"POST", // method "create"
                data: { message: $("#message").val(), game_id: <%=params[:id]%> }
            });
        }
        $("#message").val("");
    });
    function updateChatWindow(game_id) {
        $.ajax({
            url:"/chats",
            type:"GET",
            data: { game_id: game_id }
        });
    }

    // ****************** TIMERS ********************
    var defaultTimerInterval = 1000;

    // set interval of game players
    var gamePlayerListRefreshTimer = setInterval(refreshGamePlayerList, defaultTimerInterval);
    function refreshGamePlayerList() {
        // no need to recall the function (it's an interval, it'll loop forever)
        requestGamePlayersFromServer(<%=params[:id]%>);
    }

    // set interval for Game Moves Notification
    var gameMovesNotificationsRefreshTimer = setInterval(refreshGameMovesNotifications,defaultTimerInterval);
    function refreshGameMovesNotifications() {
        requestGameMovesNotifications(<%=@current_game_player_number%>,<%=@current_game_player_number%>,<%=params[:id]%>);
    }

    // set interval of checking your turn in other games (update switch game drop down)
    var checkTurnTimer = setInterval(checkTurn, defaultTimerInterval);
    function checkTurn() {
        requestCheckTurn(<%=current_user.id%>);
    }

    // set interval of chat refresh
    var chatRefreshTimer = setInterval(refreshChat, 1000);
    function refreshChat() {
        updateChatWindow(<%=params[:id]%>);
    }

    // ***********************************************
    // Call once when page has been loaded
    $(document).ready(function() {
        // Request game moves for selected player to draw his battlefield
        requestGameMovesToDrawGrid(<%=@current_game_player_number%>,<%=@current_game_player_number%>,<%=params[:id]%>);

        // Get game player list
        refreshGamePlayerList(<%=params[:id]%>);

        // Get game moves notification
        refreshGameMovesNotifications();
    });



</script>